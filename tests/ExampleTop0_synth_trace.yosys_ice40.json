{
  "history": [
    [
      {
        "cmd": "read -sv2012 \"tmp/yosys/ExampleTop0/src/ExampleTop0.v\"",
        "resultText": "1. Executing Verilog-2005 frontend: tmp/yosys/ExampleTop0/src/ExampleTop0.v\r\nParsing SystemVerilog input from `tmp/yosys/ExampleTop0/src/ExampleTop0.v' to AST representation.\r\nGenerating RTLIL representation for module `\\ExampleTop0'.\r\nNote: Assuming pure combinatorial block at tmp/yosys/ExampleTop0/src/ExampleTop0.v:24 in\r\ncompliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending\r\nuse of @* instead of @(...) for better match of synthesis and simulation.\r\nNote: Assuming pure combinatorial block at tmp/yosys/ExampleTop0/src/ExampleTop0.v:28 in\r\ncompliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending\r\nuse of @* instead of @(...) for better match of synthesis and simulation.\r\nSuccessfully finished Verilog frontend.",
        "errors": [],
        "criticalWarnings": [],
        "warnings": [],
        "infos": [],
        "__class__": "TclCmdResult"
      },
      []
    ],
    [
      {
        "cmd": "synth_ice40 -top ExampleTop0 -json \"tmp/yosys/ExampleTop0/ExampleTop0.json\"",
        "resultText": "2. Executing SYNTH_ICE40 pass.\r\n\r\n2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.\r\nGenerating RTLIL representation for module `\\SB_IO'.\r\nGenerating RTLIL representation for module `\\SB_GB_IO'.\r\nGenerating RTLIL representation for module `\\SB_GB'.\r\nGenerating RTLIL representation for module `\\SB_LUT4'.\r\nGenerating RTLIL representation for module `\\SB_CARRY'.\r\nGenerating RTLIL representation for module `\\SB_DFF'.\r\nGenerating RTLIL representation for module `\\SB_DFFE'.\r\nGenerating RTLIL representation for module `\\SB_DFFSR'.\r\nGenerating RTLIL representation for module `\\SB_DFFR'.\r\nGenerating RTLIL representation for module `\\SB_DFFSS'.\r\nGenerating RTLIL representation for module `\\SB_DFFS'.\r\nGenerating RTLIL representation for module `\\SB_DFFESR'.\r\nGenerating RTLIL representation for module `\\SB_DFFER'.\r\nGenerating RTLIL representation for module `\\SB_DFFESS'.\r\nGenerating RTLIL representation for module `\\SB_DFFES'.\r\nGenerating RTLIL representation for module `\\SB_DFFN'.\r\nGenerating RTLIL representation for module `\\SB_DFFNE'.\r\nGenerating RTLIL representation for module `\\SB_DFFNSR'.\r\nGenerating RTLIL representation for module `\\SB_DFFNR'.\r\nGenerating RTLIL representation for module `\\SB_DFFNSS'.\r\nGenerating RTLIL representation for module `\\SB_DFFNS'.\r\nGenerating RTLIL representation for module `\\SB_DFFNESR'.\r\nGenerating RTLIL representation for module `\\SB_DFFNER'.\r\nGenerating RTLIL representation for module `\\SB_DFFNESS'.\r\nGenerating RTLIL representation for module `\\SB_DFFNES'.\r\nGenerating RTLIL representation for module `\\SB_RAM40_4K'.\r\nGenerating RTLIL representation for module `\\SB_RAM40_4KNR'.\r\nGenerating RTLIL representation for module `\\SB_RAM40_4KNW'.\r\nGenerating RTLIL representation for module `\\SB_RAM40_4KNRNW'.\r\nGenerating RTLIL representation for module `\\ICESTORM_LC'.\r\nGenerating RTLIL representation for module `\\SB_PLL40_CORE'.\r\nGenerating RTLIL representation for module `\\SB_PLL40_PAD'.\r\nGenerating RTLIL representation for module `\\SB_PLL40_2_PAD'.\r\nGenerating RTLIL representation for module `\\SB_PLL40_2F_CORE'.\r\nGenerating RTLIL representation for module `\\SB_PLL40_2F_PAD'.\r\nGenerating RTLIL representation for module `\\SB_WARMBOOT'.\r\nGenerating RTLIL representation for module `\\SB_SPRAM256KA'.\r\nGenerating RTLIL representation for module `\\SB_HFOSC'.\r\nGenerating RTLIL representation for module `\\SB_LFOSC'.\r\nGenerating RTLIL representation for module `\\SB_RGBA_DRV'.\r\nGenerating RTLIL representation for module `\\SB_LED_DRV_CUR'.\r\nGenerating RTLIL representation for module `\\SB_RGB_DRV'.\r\nGenerating RTLIL representation for module `\\SB_I2C'.\r\nGenerating RTLIL representation for module `\\SB_SPI'.\r\nGenerating RTLIL representation for module `\\SB_LEDDA_IP'.\r\nGenerating RTLIL representation for module `\\SB_FILTER_50NS'.\r\nGenerating RTLIL representation for module `\\SB_IO_I3C'.\r\nGenerating RTLIL representation for module `\\SB_IO_OD'.\r\nGenerating RTLIL representation for module `\\SB_MAC16'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.2. Executing HIERARCHY pass (managing design hierarchy).\r\n\r\n2.2.1. Analyzing design hierarchy..\r\nTop module:  \\ExampleTop0\r\n\r\n2.2.2. Analyzing design hierarchy..\r\nTop module:  \\ExampleTop0\r\nRemoved 0 unused modules.\r\n\r\n2.3. Executing PROC pass (convert processes to netlists).\r\n\r\n2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\r\nCleaned up 0 empty switches.\r\n\r\n2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\r\nMarked 1 switch rules as full_case in process $proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:40$13 in module ExampleTop0.\r\nRemoved a total of 0 dead cases.\r\n\r\n2.3.3. Executing PROC_INIT pass (extract init attributes).\r\nFound init rule in `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:22$16'.\r\n  Set init value: \\vld_delayed = 1'0\r\n\r\n2.3.4. Executing PROC_ARST pass (detect async resets in processes).\r\n\r\n2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).\r\nCreating decoders for process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:22$16'.\r\n     1/1: $1\\vld_delayed[0:0]\r\nCreating decoders for process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:40$13'.\r\n     1/1: $0\\vld_delayed[0:0]\r\nCreating decoders for process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\n     1/4: $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10\r\n     2/4: $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_DATA[7:0]$9\r\n     3/4: $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_ADDR[9:0]$8\r\n     4/4: $0\\ram_port_dout[7:0]\r\nCreating decoders for process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:28$5'.\r\n     1/1: $0\\b_data[1:0]\r\nCreating decoders for process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:24$2'.\r\n     1/1: $0\\a_rd[0:0]\r\n\r\n2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).\r\nNo latch inferred for signal `\\ExampleTop0.\\b_data' from process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:28$5'.\r\nNo latch inferred for signal `\\ExampleTop0.\\a_rd' from process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:24$2'.\r\n\r\n2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).\r\nCreating register for signal `\\ExampleTop0.\\vld_delayed' using process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:40$13'.\r\n  created $dff cell `$procdff$28' with positive edge clock.\r\nCreating register for signal `\\ExampleTop0.\\ram_port_dout' using process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\n  created $dff cell `$procdff$29' with positive edge clock.\r\nCreating register for signal `\\ExampleTop0.$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_ADDR' using process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\n  created $dff cell `$procdff$30' with positive edge clock.\r\nCreating register for signal `\\ExampleTop0.$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_DATA' using process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\n  created $dff cell `$procdff$31' with positive edge clock.\r\nCreating register for signal `\\ExampleTop0.$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN' using process `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\n  created $dff cell `$procdff$32' with positive edge clock.\r\n\r\n2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).\r\nRemoving empty process `ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:22$16'.\r\nFound and cleaned up 1 empty switch in `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:40$13'.\r\nRemoving empty process `ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:40$13'.\r\nFound and cleaned up 2 empty switches in `\\ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\nRemoving empty process `ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:33$7'.\r\nRemoving empty process `ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:28$5'.\r\nRemoving empty process `ExampleTop0.$proc$tmp/yosys/ExampleTop0/src/ExampleTop0.v:24$2'.\r\nCleaned up 3 empty switches.\r\n\r\n2.4. Executing FLATTEN pass (flatten design).\r\nNo more expansions possible.\r\n\r\n2.5. Executing TRIBUF pass.\r\n\r\n2.6. Executing DEMINOUT pass (demote inout ports to input or output).\r\n\r\n2.7. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n<suppressed ~2 debug messages>\r\n\r\n2.8. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 1 unused cells and 16 unused wires.\r\n<suppressed ~2 debug messages>\r\n\r\n2.9. Executing CHECK pass (checking for obvious problems).\r\nchecking module ExampleTop0..\r\nfound and reported 0 problems.\r\n\r\n2.10. Executing OPT pass (performing simple optimizations).\r\n\r\n2.10.1. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.10.2. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\r\nRunning muxtree optimizer on module \\ExampleTop0..\r\n  Creating internal representation of mux trees.\r\n  Evaluating internal representation of mux trees.\r\n  Analyzing evaluation results.\r\nRemoved 0 multiplexer ports.\r\n<suppressed ~5 debug messages>\r\n\r\n2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\r\n  Optimizing cells in module \\ExampleTop0.\r\n    Consolidated identical input bits for $mux cell $procmux$20:\r\n      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10\r\n      New ports: A=1'0, B=1'1, Y=$0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0]\r\n      New connections: $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [7:1] = { $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] $0$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$1_EN[7:0]$10 [0] }\r\n  Optimizing cells in module \\ExampleTop0.\r\nPerformed a total of 1 changes.\r\n\r\n2.10.5. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.10.8. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.10.9. Rerunning OPT passes. (Maybe there is more to do..)\r\n\r\n2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\r\nRunning muxtree optimizer on module \\ExampleTop0..\r\n  Creating internal representation of mux trees.\r\n  Evaluating internal representation of mux trees.\r\n  Analyzing evaluation results.\r\nRemoved 0 multiplexer ports.\r\n<suppressed ~5 debug messages>\r\n\r\n2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\r\n  Optimizing cells in module \\ExampleTop0.\r\nPerformed a total of 0 changes.\r\n\r\n2.10.12. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.10.15. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.10.16. Finished OPT passes. (There is nothing left to do.)\r\n\r\n2.11. Executing WREDUCE pass (reducing word size of cells).\r\nRemoved top 1 bits (of 2) from port B of cell ExampleTop0.$add$tmp/yosys/ExampleTop0/src/ExampleTop0.v:29$6 ($add).\r\nRemoved cell ExampleTop0.$procmux$22 ($mux).\r\nRemoved cell ExampleTop0.$procmux$24 ($mux).\r\nRemoved top 7 bits (of 8) from FF cell ExampleTop0.$procdff$32 ($dff).\r\n\r\n2.12. Executing PEEPOPT pass (run peephole optimizers).\r\n\r\n2.13. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 0 unused cells and 2 unused wires.\r\n<suppressed ~1 debug messages>\r\n\r\n2.14. Executing SHARE pass (SAT-based resource sharing).\r\n\r\n2.15. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.\r\nGenerating RTLIL representation for module `\\_90_lut_cmp_'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.15.2. Continuing TECHMAP pass.\r\nNo more expansions possible.\r\n\r\n2.16. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.17. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.18. Executing ALUMACC pass (create $alu and $macc cells).\r\nExtracting $alu and $macc cells in module ExampleTop0:\r\n  creating $macc model for $add$tmp/yosys/ExampleTop0/src/ExampleTop0.v:29$6 ($add).\r\n  creating $alu model for $macc $add$tmp/yosys/ExampleTop0/src/ExampleTop0.v:29$6.\r\n  creating $alu cell for $add$tmp/yosys/ExampleTop0/src/ExampleTop0.v:29$6: $auto$alumacc.cc:474:replace_alu$33\r\n  created 1 $alu and 0 $macc cells.\r\n\r\n2.19. Executing OPT pass (performing simple optimizations).\r\n\r\n2.19.1. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\r\nRunning muxtree optimizer on module \\ExampleTop0..\r\n  Creating internal representation of mux trees.\r\n  Evaluating internal representation of mux trees.\r\n  Analyzing evaluation results.\r\nRemoved 0 multiplexer ports.\r\n<suppressed ~3 debug messages>\r\n\r\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\r\n  Optimizing cells in module \\ExampleTop0.\r\nPerformed a total of 0 changes.\r\n\r\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.19.8. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.19.9. Finished OPT passes. (There is nothing left to do.)\r\n\r\n2.20. Executing FSM pass (extract and optimize FSM).\r\n\r\n2.20.1. Executing FSM_DETECT pass (finding FSMs in design).\r\n\r\n2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).\r\n\r\n2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).\r\n\r\n2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).\r\n\r\n2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\r\n\r\n2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\r\n\r\n2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\r\n\r\n2.21. Executing OPT pass (performing simple optimizations).\r\n\r\n2.21.1. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.21.5. Finished fast OPT passes.\r\n\r\n2.22. Executing MEMORY pass.\r\n\r\n2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).\r\nChecking cell `$memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$15' in module `\\ExampleTop0': merged $dff to cell.\r\nChecking cell `$memrd$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:35$11' in module `\\ExampleTop0': merged data $dff with rd enable to cell.\r\n\r\n2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 5 unused cells and 6 unused wires.\r\n<suppressed ~6 debug messages>\r\n\r\n2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\r\n\r\n2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).\r\nCollecting $memrd, $memwr and $meminit for memory `\\ram' in module `\\ExampleTop0':\r\n  $memwr$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:37$15 ($memwr)\r\n  $memrd$\\ram$tmp/yosys/ExampleTop0/src/ExampleTop0.v:35$11 ($memrd)\r\n\r\n2.23. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).\r\nProcessing ExampleTop0.ram:\r\n  Properties: ports=2 bits=8192 rports=1 wports=1 dbits=8 abits=10 words=1024\r\n  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):\r\n    Bram geometry: abits=8 dbits=16 wports=0 rports=0\r\n    Estimated number of duplicates for more read ports: dups=1\r\n    Metrics for $__ICE40_RAM4K_M0: awaste=0 dwaste=8 bwaste=2048 waste=2048 efficiency=50\r\n    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.\r\n    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):\r\n      Write port #0 is in clock domain \\clk.\r\n        Mapped to bram port B1.\r\n      Read port #0 is in clock domain \\clk.\r\n        Mapped to bram port A1.1.\r\n      Updated properties: dups=1 waste=2048 efficiency=50\r\n      Storing for later selection.\r\n  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):\r\n    Bram geometry: abits=9 dbits=8 wports=0 rports=0\r\n    Estimated number of duplicates for more read ports: dups=1\r\n    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100\r\n    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.\r\n    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):\r\n      Write port #0 is in clock domain \\clk.\r\n        Mapped to bram port B1.\r\n      Read port #0 is in clock domain \\clk.\r\n        Mapped to bram port A1.1.\r\n      Updated properties: dups=1 waste=0 efficiency=100\r\n      Storing for later selection.\r\n  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):\r\n    Bram geometry: abits=10 dbits=4 wports=0 rports=0\r\n    Estimated number of duplicates for more read ports: dups=1\r\n    Metrics for $__ICE40_RAM4K_M123: awaste=0 dwaste=0 bwaste=0 waste=0 efficiency=100\r\n    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.\r\n    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):\r\n      Write port #0 is in clock domain \\clk.\r\n        Mapped to bram port B1.\r\n      Read port #0 is in clock domain \\clk.\r\n        Mapped to bram port A1.1.\r\n      Updated properties: dups=1 waste=0 efficiency=100\r\n      Storing for later selection.\r\n  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):\r\n    Bram geometry: abits=11 dbits=2 wports=0 rports=0\r\n    Estimated number of duplicates for more read ports: dups=1\r\n    Metrics for $__ICE40_RAM4K_M123: awaste=1024 dwaste=0 bwaste=2048 waste=2048 efficiency=50\r\n    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) accepted.\r\n    Mapping to bram type $__ICE40_RAM4K_M123 (variant 3):\r\n      Write port #0 is in clock domain \\clk.\r\n        Mapped to bram port B1.\r\n      Read port #0 is in clock domain \\clk.\r\n        Mapped to bram port A1.1.\r\n      Updated properties: dups=1 waste=2048 efficiency=50\r\n      Storing for later selection.\r\n  Selecting best of 4 rules:\r\n    Efficiency for rule 2.3: efficiency=50, cells=4, acells=1\r\n    Efficiency for rule 2.2: efficiency=100, cells=2, acells=1\r\n    Efficiency for rule 2.1: efficiency=100, cells=2, acells=2\r\n    Efficiency for rule 1.1: efficiency=50, cells=4, acells=4\r\n    Selected rule 2.2 with efficiency 100.\r\n    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):\r\n      Write port #0 is in clock domain \\clk.\r\n        Mapped to bram port B1.\r\n      Read port #0 is in clock domain \\clk.\r\n        Mapped to bram port A1.1.\r\n      Creating $__ICE40_RAM4K_M123 cell at grid position <0 0 0>: ram.0.0.0\r\n      Creating $__ICE40_RAM4K_M123 cell at grid position <1 0 0>: ram.1.0.0\r\n\r\n2.25. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.\r\nGenerating RTLIL representation for module `\\$__ICE40_RAM4K'.\r\nGenerating RTLIL representation for module `\\$__ICE40_RAM4K_M0'.\r\nGenerating RTLIL representation for module `\\$__ICE40_RAM4K_M123'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.25.2. Continuing TECHMAP pass.\r\nUsing template $paramod\\$__ICE40_RAM4K_M123\\CFG_ABITS=10\\CFG_DBITS=4\\CLKPOL2=1\\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M123.\r\nUsing template $paramod$e960588dacff89b8f882c5a0277b8c8d527c9965\\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.\r\nNo more expansions possible.\r\n<suppressed ~46 debug messages>\r\n\r\n2.26. Executing ICE40_BRAMINIT pass.\r\n\r\n2.27. Executing OPT pass (performing simple optimizations).\r\n\r\n2.27.1. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n<suppressed ~21 debug messages>\r\n\r\n2.27.2. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 0 unused cells and 49 unused wires.\r\n<suppressed ~1 debug messages>\r\n\r\n2.27.5. Finished fast OPT passes.\r\n\r\n2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).\r\n\r\n2.29. Executing OPT pass (performing simple optimizations).\r\n\r\n2.29.1. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.29.2. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\r\nRunning muxtree optimizer on module \\ExampleTop0..\r\n  Creating internal representation of mux trees.\r\n  Evaluating internal representation of mux trees.\r\n  Analyzing evaluation results.\r\nRemoved 0 multiplexer ports.\r\n<suppressed ~1 debug messages>\r\n\r\n2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\r\n  Optimizing cells in module \\ExampleTop0.\r\nPerformed a total of 0 changes.\r\n\r\n2.29.5. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.29.8. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.29.9. Finished OPT passes. (There is nothing left to do.)\r\n\r\n2.30. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.\r\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\r\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\r\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\r\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\r\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\r\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\r\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\r\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\r\nGenerating RTLIL representation for module `\\_90_fa'.\r\nGenerating RTLIL representation for module `\\_90_lcu'.\r\nGenerating RTLIL representation for module `\\_90_alu'.\r\nGenerating RTLIL representation for module `\\_90_macc'.\r\nGenerating RTLIL representation for module `\\_90_alumacc'.\r\nGenerating RTLIL representation for module `\\$__div_mod_u'.\r\nGenerating RTLIL representation for module `\\$__div_mod'.\r\nGenerating RTLIL representation for module `\\_90_div'.\r\nGenerating RTLIL representation for module `\\_90_mod'.\r\nGenerating RTLIL representation for module `\\_90_pow'.\r\nGenerating RTLIL representation for module `\\_90_pmux'.\r\nGenerating RTLIL representation for module `\\_90_lut'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.\r\nGenerating RTLIL representation for module `\\_80_ice40_alu'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.30.3. Continuing TECHMAP pass.\r\nUsing extmapper simplemap for cells of type $and.\r\nUsing extmapper simplemap for cells of type $not.\r\nUsing extmapper simplemap for cells of type $mux.\r\nUsing extmapper simplemap for cells of type $dff.\r\nUsing template $paramod\\_90_alu\\A_SIGNED=0\\B_SIGNED=0\\A_WIDTH=1\\B_WIDTH=2\\Y_WIDTH=2 for cells of type $alu.\r\nUsing extmapper simplemap for cells of type $xor.\r\nUsing template $paramod\\_90_lcu\\WIDTH=2 for cells of type $lcu.\r\nUsing extmapper simplemap for cells of type $pos.\r\nUsing extmapper simplemap for cells of type $or.\r\nNo more expansions possible.\r\n<suppressed ~135 debug messages>\r\n\r\n2.31. Executing ICE40_OPT pass (performing simple optimizations).\r\n\r\n2.31.1. Running ICE40 specific optimizations.\r\n\r\n2.31.2. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n<suppressed ~10 debug messages>\r\n\r\n2.31.3. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 3 unused cells and 29 unused wires.\r\n<suppressed ~4 debug messages>\r\n\r\n2.31.6. Rerunning OPT passes. (Removed registers in this run.)\r\n\r\n2.31.7. Running ICE40 specific optimizations.\r\n\r\n2.31.8. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.31.9. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.31.12. Finished OPT passes. (There is nothing left to do.)\r\n\r\n2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).\r\n\r\n2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).\r\nSelected cell types for direct conversion:\r\n  $_DFF_PP1_ -> $__DFFE_PP1\r\n  $_DFF_PP0_ -> $__DFFE_PP0\r\n  $_DFF_PN1_ -> $__DFFE_PN1\r\n  $_DFF_PN0_ -> $__DFFE_PN0\r\n  $_DFF_NP1_ -> $__DFFE_NP1\r\n  $_DFF_NP0_ -> $__DFFE_NP0\r\n  $_DFF_NN1_ -> $__DFFE_NN1\r\n  $_DFF_NN0_ -> $__DFFE_NN0\r\n  $_DFF_N_ -> $_DFFE_NP_\r\n  $_DFF_P_ -> $_DFFE_PP_\r\nTransforming FF to FF+Enable cells in module ExampleTop0:\r\n\r\n2.34. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.\r\nGenerating RTLIL representation for module `\\$_DFF_N_'.\r\nGenerating RTLIL representation for module `\\$_DFF_P_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_NN_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_PN_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_NP_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_PP_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NN0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NN1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PN0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PN1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NP0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NP1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PP0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PP1_'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NN0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NN1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PN0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PN1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NP0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NP1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PP0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PP1'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.34.2. Continuing TECHMAP pass.\r\nUsing template \\$_DFF_P_ for cells of type $_DFF_P_.\r\nNo more expansions possible.\r\n<suppressed ~1 debug messages>\r\n\r\n2.35. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).\r\n\r\n2.37. Executing ICE40_FFINIT pass (implement FF init values).\r\nHandling FF init values in ExampleTop0.\r\nFF init value for cell $auto$simplemap.cc:420:simplemap_dff$99 (SB_DFF): \\vld_delayed = 0\r\n\r\n2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).\r\nMerging set/reset $_MUX_ cells into SB_FFs in ExampleTop0.\r\n  Merging $auto$simplemap.cc:277:simplemap_mux$98 (A=1'0, B=\\a_vld, S=\\rst_n) into $auto$simplemap.cc:420:simplemap_dff$99 (SB_DFF).\r\n\r\n2.39. Executing ICE40_OPT pass (performing simple optimizations).\r\n\r\n2.39.1. Running ICE40 specific optimizations.\r\n\r\n2.39.2. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n<suppressed ~1 debug messages>\r\n\r\n2.39.3. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\nRemoved 1 unused cells and 4 unused wires.\r\n<suppressed ~2 debug messages>\r\n\r\n2.39.6. Rerunning OPT passes. (Removed registers in this run.)\r\n\r\n2.39.7. Running ICE40 specific optimizations.\r\n\r\n2.39.8. Executing OPT_EXPR pass (perform const folding).\r\nOptimizing module ExampleTop0.\r\n\r\n2.39.9. Executing OPT_MERGE pass (detect identical cells).\r\nFinding identical cells in module `\\ExampleTop0'.\r\nRemoved a total of 0 cells.\r\n\r\n2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).\r\n\r\n2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).\r\nFinding unused cells or wires in module \\ExampleTop0..\r\n\r\n2.39.12. Finished OPT passes. (There is nothing left to do.)\r\n\r\n2.40. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.\r\nGenerating RTLIL representation for module `\\$_DLATCH_N_'.\r\nGenerating RTLIL representation for module `\\$_DLATCH_P_'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.40.2. Continuing TECHMAP pass.\r\nNo more expansions possible.\r\n\r\n2.41. Executing ABC pass (technology mapping using ABC).\r\n\r\n2.41.1. Extracting gate netlist of module `\\ExampleTop0' to `<abc-temp-dir>/input.blif'..\r\nExtracted 6 gates and 14 wires to a netlist network with 7 inputs and 5 outputs.\r\n\r\n2.41.1.1. Executing ABC.\r\nRunning ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1\r\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\r\nABC: \r\nABC: + read_blif <abc-temp-dir>/input.blif \r\nABC: + read_lut <abc-temp-dir>/lutdefs.txt \r\nABC: + strash \r\nABC: + ifraig \r\nABC: + scorr \r\nABC: Warning: The network is combinational (run \"fraig\" or \"fraig_sweep\").\r\nABC: + dc2 \r\nABC: + dretime \r\nABC: + retime \r\nABC: + strash \r\nABC: + dch -f \r\nABC: + if \r\nABC: + mfs2 \r\nABC: + lutpack -S 1 \r\nABC: + dress \r\nABC: Total number of equiv classes                =       6.\r\nABC: Participating nodes from both networks       =      11.\r\nABC: Participating nodes from the first network   =       5. (  83.33 % of nodes)\r\nABC: Participating nodes from the second network  =       6. ( 100.00 % of nodes)\r\nABC: Node pairs (any polarity)                    =       5. (  83.33 % of names can be moved)\r\nABC: Node pairs (same polarity)                   =       5. (  83.33 % of names can be moved)\r\nABC: Total runtime =     0.00 sec\r\nABC: + write_blif <abc-temp-dir>/output.blif \r\n\r\n2.41.1.2. Re-integrating ABC results.\r\nABC RESULTS:              $lut cells:       10\r\nABC RESULTS:        internal signals:        2\r\nABC RESULTS:           input signals:        7\r\nABC RESULTS:          output signals:        5\r\nRemoving temp directory.\r\nRemoved 0 unused cells and 13 unused wires.\r\n\r\n2.42. Executing TECHMAP pass (map to technology primitives).\r\n\r\n2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v\r\nParsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.\r\nGenerating RTLIL representation for module `\\$_DFF_N_'.\r\nGenerating RTLIL representation for module `\\$_DFF_P_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_NN_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_PN_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_NP_'.\r\nGenerating RTLIL representation for module `\\$_DFFE_PP_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NN0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NN1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PN0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PN1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NP0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_NP1_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PP0_'.\r\nGenerating RTLIL representation for module `\\$_DFF_PP1_'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NN0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NN1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PN0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PN1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NP0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_NP1'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PP0'.\r\nGenerating RTLIL representation for module `\\$__DFFE_PP1'.\r\nGenerating RTLIL representation for module `\\$lut'.\r\nSuccessfully finished Verilog frontend.\r\n\r\n2.42.2. Continuing TECHMAP pass.\r\nUsing template $paramod\\$lut\\WIDTH=2\\LUT=4'0100 for cells of type $lut.\r\nUsing template $paramod\\$lut\\WIDTH=1\\LUT=2'01 for cells of type $lut.\r\nUsing template $paramod\\$lut\\WIDTH=2\\LUT=4'1000 for cells of type $lut.\r\nUsing template $paramod\\$lut\\WIDTH=2\\LUT=4'0110 for cells of type $lut.\r\nNo more expansions possible.\r\n<suppressed ~49 debug messages>\r\nRemoved 0 unused cells and 10 unused wires.\r\n\r\n2.43. Executing HIERARCHY pass (managing design hierarchy).\r\n\r\n2.43.1. Analyzing design hierarchy..\r\nTop module:  \\ExampleTop0\r\n\r\n2.43.2. Analyzing design hierarchy..\r\nTop module:  \\ExampleTop0\r\nRemoved 0 unused modules.\r\n\r\n2.44. Printing statistics.\r\n\r\n=== ExampleTop0 ===\r\n\r\n   Number of wires:                 19\r\n   Number of wire bits:             81\r\n   Number of public wires:          15\r\n   Number of public wire bits:      40\r\n   Number of memories:               0\r\n   Number of memory bits:            0\r\n   Number of processes:              0\r\n   Number of cells:                  8\r\n     SB_DFFSR                        1\r\n     SB_LUT4                         5\r\n     SB_RAM40_4K                     2\r\n\r\n2.45. Executing CHECK pass (checking for obvious problems).\r\nchecking module ExampleTop0..\r\nfound and reported 0 problems.\r\n\r\n2.46. Executing JSON backend.",
        "errors": [],
        "criticalWarnings": [],
        "warnings": [],
        "infos": [],
        "__class__": "TclCmdResult"
      },
      []
    ]
  ],
  "filesToWatch": {},
  "executorCls": [
    "hwtBuildsystem.yosys.executor",
    "YosysExecutor"
  ],
  "workerCnt": null
}